C# 的 async/await 其实就是一个通用的异步编程模型，编译器会对 async 方法采用 CPS 变换，以 await 为分界线将方法进行拆分，然后使用一个状态机来驱动执行。
1.尽可能不要在项目中使用 async void 因为他会被UnitySynchronizationContext 异常抛出 也可能不抛出
2.C#在检查一个对象是否可以Await时有如下几个必要条件
   #是否有GetAwaiter方法（静态扩展也可以）
   #GetAwaiter是否有返回值（下面简称obj）
   #obj是否继承了INotifyCompletion接口
   #obj是否有bool IsCompleted { get；}    

-------------------------------------------------------------------------------------
      public class ButtonExample
      {
          private readonly Button _first;
          private readonly Button _second;
      
          public ButtonExample(Button first, Button second)
          {
              _first  = first;
              _second = second;
          }
      
          public async Task Start()
          {
              await _first;
              Debug.Log("First Clicked!");
              await _second;
              Debug.Log("Second Clicked!");
          }
      }
      
      
      public class AwaitableButton : INotifyCompletion
      {
          public bool IsCompleted => _is_completed;
      
          private readonly Button _btn;
      
          private Action _continuation;
          private bool   _is_completed;
      
          public AwaitableButton(Button btn) { _btn = btn; }
      
          private void _OnClicked()
          {
              _btn.onClick.RemoveListener(_OnClicked);
              _continuation();
      
              _is_completed = true;
          }
      
          public void OnCompleted(Action continuation)
          {
              Debug.Log("AwaitableButton OnCompleted :");
              _continuation = continuation;
              _btn.onClick.AddListener(_OnClicked);
          }
      
          public void GetResult() { }
      }
      
      public static class ButtonEx
      {
          public static AwaitableButton GetAwaiter(this Button self) { return new AwaitableButton(self); }
      }


3.Fire&Forget 日常使用Async时，我们会面临两种情况，一种是这个任务需要等待，另一种并不希望被等待。需要等待直接使用await.xxx;而另一种情况 我们可以理解为Fire&Forget。在UniTask环境中，xxx.Forget()
  所有异步代码，如果不需要等待，必须手动设置Fire&Forget，否者必须Await
4.手搓状态机
    // _Custom 函数与此函数完全相同
    private async Task<int> _Example()
    {
        await Task.Delay(1000);

        return 1;
    }

   等同于

   private Task<int> _Custom()
   {
       var state_machine = new DelayAsyncStateMachine {builder = AsyncTaskMethodBuilder<int>.Create()};
   
       state_machine.builder.Start(ref state_machine);
   
       return state_machine.builder.Task;
   }


---------------------------------------------------------------------------------
   public struct DelayAsyncStateMachine : IAsyncStateMachine
   {
       public AsyncTaskMethodBuilder<int> builder;
   
       private int         _state;
       private TaskAwaiter _awaiter;
   
       public void MoveNext()
       {
           if(_state == 0)
           {
               _awaiter = Task.Delay(1000).GetAwaiter();
   
               // lucky check
               if(_awaiter.IsCompleted)
               {
                   _state = 1;
                   goto state1;
               }
   
               // 我们只希望 _awaiter 被赋值一次
               // 此时说明 Delay 的内容没有完成
               // 需要告诉 builder 等待 _awaiter 完成, 才可以继续向下 MoveNext
               // 此处通过断点调试, 查看堆栈会非常清晰
               _state = 1;
               builder.AwaitUnsafeOnCompleted(ref _awaiter, ref this);
   
               return;
           }
   
           state1:
           if(_state == 1)
           {
               _awaiter.GetResult();
               builder.SetResult(1);
           }
       }
   
       public void SetStateMachine(IAsyncStateMachine state_machine) { builder.SetStateMachine(state_machine); }
   }

